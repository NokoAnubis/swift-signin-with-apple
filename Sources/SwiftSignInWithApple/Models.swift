//
//  File.swift
//  
//
//  Created by Joel Joseph on 5/7/23.
//

import SwiftJWT
import Foundation

/**
 WebValidationTokenRequest is based off of https://developer.apple.com/documentation/signinwithapplerestapi/generate_and_validate_tokens
 */
public struct WebValidationTokenRequest {
    // ClientID is the "Services ID" value that you get when navigating to your "sign in with Apple"-enabled service ID
    let clientID: String

    // ClientSecret is secret generated as a JSON Web Token that uses the secret key generated by the WWDR portal.
    // It can also be generated using the GenerateClientSecret function provided in this package
    let clientSecret: String

    // Code is the authorization code received from your application’s user agent.
    // The code is single use only and valid for five minutes.
    let code: String

    // RedirectURI is the destination URI the code was originally sent to.
    // Redirect URLs must be registered with Apple. You can register up to 10. Apple will throw an error with IP address
    // URLs on the authorization screen, and will not let you add localhost in the developer portal.
    let redirectURI: String
}

/**
 AppValidationTokenRequest is based off of https://developer.apple.com/documentation/signinwithapplerestapi/generate_and_validate_tokens
 */
public struct AppValidationTokenRequest {
    // ClientID is the package name of your app
    let clientID: String

    // ClientSecret is secret generated as a JSON Web Token that uses the secret key generated by the WWDR portal.
    // It can also be generated using the GenerateClientSecret function provided in this package
    let clientSecret: String

    // The authorization code received in an authorization response sent to your app. The code is single-use only and valid for five minutes.
    // Authorization code validation requests require this parameter.
    let code: String
    
    public init(clientID: String, clientSecret: String, code: String) {
        self.clientID = clientID
        self.clientSecret = clientSecret
        self.code = code
    }
}

/**
 ValidationRefreshRequest is based off of https://developer.apple.com/documentation/signinwithapplerestapi/generate_and_validate_tokens
 */
public struct ValidationRefreshRequest {
    // ClientID is the "Services ID" value that you get when navigating to your "sign in with Apple"-enabled service ID
    let clientID: String

    // ClientSecret is secret generated as a JSON Web Token that uses the secret key generated by the WWDR portal.
    // It can also be generated using the GenerateClientSecret function provided in this package
    let clientSecret: String

    // RefreshToken is the refresh token given during a previous validation
    let refreshToken: String
}

/**
 RevokeAccessTokenRequest is based off https://developer.apple.com/documentation/sign_in_with_apple/revoke_tokens
 */
public struct RevokeAccessTokenRequest {
    // ClientID is the "Services ID" value that you get when navigating to your "sign in with Apple"-enabled service ID
    let clientID: String?

    // ClientSecret is secret generated as a JSON Web Token that uses the secret key generated by the WWDR portal.
    // It can also be generated using the GenerateClientSecret function provided in this package
    let clientSecret: String

    // AccessToken is the auth token given during a previous validation
    let accessToken: String
}

/**
  RevokeRefreshTokenRequest is based off https://developer.apple.com/documentation/sign_in_with_apple/revoke_tokens
 */
public struct RevokeRefreshTokenRequest {
    // ClientID is the "Services ID" value that you get when navigating to your "sign in with Apple"-enabled service ID
    var clientID: String

    // ClientSecret is secret generated as a JSON Web Token that uses the secret key generated by the WWDR portal.
    // It can also be generated using the GenerateClientSecret function provided in this package
    var clientSecret: String

    // RefreshToken is the refresh token given during a previous validation
    var refreshToken: String
}


/**
 ValidationResponse is based off of https://developer.apple.com/documentation/signinwithapplerestapi/tokenresponse
 */
public struct ValidationResponse: Codable {
    // (Reserved for future use) A token used to access allowed data. Currently, no data set has been defined for access.
    let accessToken: String?

    // The type of access token. It will always be "bearer".
    let tokenType: String?

    // The amount of time, in seconds, before the access token expires. You can revalidate with the "RefreshToken"
    let expiresIn: Int?

    // The refresh token used to regenerate new access tokens. Store this token securely on your server.
    // The refresh token isn’t returned when validating an existing refresh token. Please refer to RefreshReponse below
    let refreshToken: String?

    // A JSON Web Token that contains the user’s identity information.
    let idToken: String?

    // Used to capture any error returned by the endpoint. Do not trust the response if this error is not nil
    let error: String?

    // A more detailed precision about the current error.
    let errorDescription: String?
    
    public init() {
        self.accessToken = ""
        self.tokenType = ""
        self.expiresIn = 0
        self.refreshToken = ""
        self.idToken = ""
        self.error = nil
        self.errorDescription = nil
    }
    
    enum CodingKeys: String, CodingKey {
        case accessToken = "access_token"
        case tokenType = "token_type"
        case expiresIn = "expires_in"
        case refreshToken = "refresh_token"
        case idToken = "id_token"
        case error 
        case errorDescription = "error_description"
    }
}

/**
 RefreshResponse is a subset of ValidationResponse returned by Apple
 */
public struct RefreshResponse: Codable {
    // (Reserved for future use) A token used to access allowed data. Currently, no data set has been defined for access.
    let accessToken: String?

    // The type of access token. It will always be "bearer".
    let tokenType: String?

    // The amount of time, in seconds, before the access token expires. You can revalidate with this token
    let expiresIn: Int?

    // Used to capture any error returned by the endpoint. Do not trust the response if this error is not nil
    let error: String?

    // A more detailed precision about the current error.
    let errorDescription: String?
}

/**
 RevokeResponse is based of https://developer.apple.com/documentation/sign_in_with_apple/revoke_tokens
 */
public struct RevokeResponse: Codable {
    // Used to capture any error returned by the endpoint
    let error: String?

    // A more detailed precision about the current error.
    let errorDescription: String?
}

/**
 For the JWT Payload
 */
public struct JWTClaims: Claims {
    let iss: String
    let sub: String
    let exp: Date
    let aud: String
    let iat: Date
}
